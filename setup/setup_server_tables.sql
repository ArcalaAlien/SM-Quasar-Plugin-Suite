/* 
MAKE SURE YOU RUN setup_schema_plus_store.sql FIRST!

REPLACE srv_ WITH srv_<subdomain>_ !!!!
[srv1].example.com THE BOXED IN AREA IS THE SUBDOMAIN! 
ALSO CHANGE THE VIEW NAMES AT THE BOTTOM FROM [SERVER Player Info]
TO [subdomain Player Info]!! SAME THING WITH THE STAR RATING VIEW!
*/
-- MySQL Script generated by MySQL Workbench
-- Sun Aug 10 17:30:09 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Table `quasar`.`srv_players`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quasar`.`srv_players` ;

CREATE TABLE IF NOT EXISTS `quasar`.`srv_players` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `steam2_id` VARCHAR(64) NOT NULL DEFAULT 'UNKNOWN',
  `steam3_id` VARCHAR(64) NOT NULL DEFAULT 'UNKNOWN',
  `steam64_id` VARCHAR(64) NOT NULL DEFAULT 'UNKNOWN',
  `points` DECIMAL NULL DEFAULT 0.0,
  `can_vote` INT NOT NULL DEFAULT 1,
  `name` VARCHAR(128) NOT NULL DEFAULT 'NONE',
  `num_loadouts` INT NOT NULL DEFAULT 1 COMMENT '`',
  `last_login` INT NOT NULL DEFAULT -1,
  `playtime` INT NOT NULL DEFAULT 0,
  `equipped_loadout` INT NOT NULL DEFAULT 1,
  `first_login` INT NOT NULL DEFAULT -1,
  `time_afk` INT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`, `steam64_id`, `steam2_id`, `steam3_id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `steam64_id_UNIQUE` (`steam64_id` ASC) VISIBLE,
  UNIQUE INDEX `steam2_id_UNIQUE` (`steam2_id` ASC) VISIBLE,
  UNIQUE INDEX `steam3_id_UNIQUE` (`steam3_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `quasar`.`srv_maps`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quasar`.`srv_maps` ;

CREATE TABLE IF NOT EXISTS `quasar`.`srv_maps` (
  `id` INT NOT NULL,
  `category` VARCHAR(64) NOT NULL DEFAULT 'NONE',
  `workshop_id` VARCHAR(128) NULL,
  `author` VARCHAR(128) NULL DEFAULT 'UNKNOWN',
  `map` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`id`, `map`),
  UNIQUE INDEX `map_UNIQUE` (`map` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `quasar`.`srv_playersmaps`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quasar`.`srv_playersmaps` ;

CREATE TABLE IF NOT EXISTS `quasar`.`srv_playersmaps` (
  `steam_id` VARCHAR(64) NOT NULL,
  `map` VARCHAR(128) NOT NULL,
  `rating` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`steam_id`, `map`),
  INDEX `FK_playersmaps_maps_idx` (`map` ASC) INVISIBLE,
  UNIQUE INDEX `steam_id_UNIQUE` (`steam_id` ASC) VISIBLE,
  UNIQUE INDEX `map_UNIQUE` (`map` ASC) VISIBLE,
  CONSTRAINT `FK_playersmaps_players`
    FOREIGN KEY (`steam_id`)
    REFERENCES `quasar`.`srv_players` (`steam64_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_playersmaps_maps`
    FOREIGN KEY (`map`)
    REFERENCES `quasar`.`srv_maps` (`map`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `quasar`.`srv_votelogs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quasar`.`srv_votelogs` ;

CREATE TABLE IF NOT EXISTS `quasar`.`srv_votelogs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `voter_name` VARCHAR(128) NOT NULL DEFAULT 'NONE',
  `voter_steam_id` VARCHAR(64) NOT NULL DEFAULT 0,
  `votee_name` VARCHAR(128) NOT NULL DEFAULT 'NONE',
  `votee_steam_id` VARCHAR(64) NOT NULL DEFAULT 0,
  `vote_type` INT NOT NULL DEFAULT 0,
  `date` INT NULL DEFAULT 0,
  PRIMARY KEY (`id`, `voter_steam_id`),
  INDEX `FK_votelogs_players_idx` (`voter_steam_id` ASC) VISIBLE,
  INDEX `FK_votelogs_players2_idx` (`votee_steam_id` ASC) VISIBLE,
  CONSTRAINT `FK_votelogs_players`
    FOREIGN KEY (`voter_steam_id`)
    REFERENCES `quasar`.`srv_players` (`steam64_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_votelogs_players2`
    FOREIGN KEY (`votee_steam_id`)
    REFERENCES `quasar`.`srv_players` (`steam64_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `quasar`.`srv_chatlogs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quasar`.`srv_chatlogs` ;

CREATE TABLE IF NOT EXISTS `quasar`.`srv_chatlogs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NULL DEFAULT 'NONE',
  `steam_id` VARCHAR(64) NOT NULL,
  `message` VARCHAR(256) NULL DEFAULT 'NONE',
  `date` INT NOT NULL,
  PRIMARY KEY (`id`, `steam_id`),
  INDEX `FK_chatlogs_players_idx` (`steam_id` ASC) VISIBLE,
  CONSTRAINT `FK_chatlogs_players`
    FOREIGN KEY (`steam_id`)
    REFERENCES `quasar`.`srv_players` (`steam64_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `quasar`.`srv_mapsfeedback`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quasar`.`srv_mapsfeedback` ;

CREATE TABLE IF NOT EXISTS `quasar`.`srv_mapsfeedback` (
  `steam_id` VARCHAR(64) NOT NULL,
  `map` VARCHAR(128) NOT NULL,
  `pos_x` DECIMAL NULL,
  `pos_y` DECIMAL NULL,
  `pos_z` DECIMAL NULL,
  `ang_x` DECIMAL NULL,
  `ang_y` DECIMAL NULL,
  `ang_z` DECIMAL NULL,
  `feedback` VARCHAR(256) NOT NULL,
  PRIMARY KEY (`steam_id`, `feedback`, `map`),
  INDEX `FK_mapsfeedback_maps_idx` (`map` ASC) VISIBLE,
  CONSTRAINT `FK_mapsfeedback_maps`
    FOREIGN KEY (`map`)
    REFERENCES `quasar`.`srv_maps` (`map`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_mapsfeedback_players`
    FOREIGN KEY (`steam_id`)
    REFERENCES `quasar`.`srv_players` (`steam64_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `quasar` ;

-- -----------------------------------------------------
-- Placeholder table for view `quasar`.`[SERVER Map Ratings]`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `quasar`.`[SERVER Map Ratings]` (`map` INT, `total_votes` INT, `rating` INT);

-- -----------------------------------------------------
-- Placeholder table for view `quasar`.`[SERVER Player Info]`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `quasar`.`[SERVER Player Info]` (`name` INT, `steam2_id` INT, `steam3_id` INT, `steam64_id` INT, `points` INT, `credits` INT, `num_loadouts` INT, `equipped_loadout` INT, `first_login` INT, `last_login` INT, `playtime` INT, `time_afk` INT);

-- -----------------------------------------------------
-- View `quasar`.`[SERVER Map Ratings]`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quasar`.`[SERVER Map Ratings]`;
DROP VIEW IF EXISTS `quasar`.`[SERVER Map Ratings]` ;
USE `quasar`;
CREATE  OR REPLACE VIEW `[SERVER Map Ratings]` AS
SELECT vt.map, total_votes, CAST(total_rating/SUM(total_votes) as decimal) rating
FROM (
	SELECT 	m.map, 
			COUNT(DISTINCT steam_id) total_votes,
            SUM(pm.rating) total_rating
    FROM srv_maps m
		JOIN srv_playersmaps pm
			ON m.map = pm.map
	GROUP BY map
) AS vt
	JOIN srv_playersmaps pm
		ON vt.map = pm.map
GROUP BY map, total_votes
ORDER BY rating DESC;

-- -----------------------------------------------------
-- View `quasar`.`[SERVER Player Info]`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quasar`.`[SERVER Player Info]`;
DROP VIEW IF EXISTS `quasar`.`[SERVER Player Info]` ;
USE `quasar`;
CREATE  OR REPLACE VIEW `[SERVER Player Info]` AS
SELECT 	name, steam2_id, steam3_id, steam64_id, 
		points, credits, num_loadouts, equipped_loadout,
        first_login, last_login, playtime, time_afk
FROM srv_players p
	JOIN str_playersbank b
		ON p.steam64_id = b.steam_id;

DELIMITER $$

USE `quasar`$$
DROP TRIGGER IF EXISTS `quasar`.`srv_players_AFTER_INSERT` $$
USE `quasar`$$
CREATE DEFINER = CURRENT_USER TRIGGER `quasar`.`srv_players_AFTER_INSERT` AFTER INSERT ON `srv_players` FOR EACH ROW
BEGIN
    INSERT INTO str_playersgroups(steam_id, group_id) VALUES (NEW.steam64_id, 1) ON DUPLICATE KEY UPDATE steam_id = NEW.steam64_id;
	INSERT INTO str_playersbank (steam_id) VALUES (NEW.steam64_id) ON DUPLICATE KEY UPDATE steam_id = NEW.steam64_id;
END;$$

DELIMITER ;
